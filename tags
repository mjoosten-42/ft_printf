!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/maarten/ft_printf/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
CONVERSION	src/ft_vdprintf.c	/^	CONVERSION,$/;"	e	enum:e_state	file:
DONE	src/ft_vdprintf.c	/^	DONE$/;"	e	enum:e_state	file:
FLAGS	src/ft_vdprintf.c	/^	FLAGS,$/;"	e	enum:e_state	file:
FT_PRINTF_H	inc/ft_printf.h	/^#define FT_PRINTF_H$/;"	d
LENGTH	src/ft_vdprintf.c	/^	LENGTH,$/;"	e	enum:e_state	file:
MAX	src/ft_vdprintf.c	/^#define MAX(/;"	d	file:
PRECISION	src/ft_vdprintf.c	/^	PRECISION,$/;"	e	enum:e_state	file:
STRING_H	inc/c_string.h	/^#define STRING_H$/;"	d
WIDTH	src/ft_vdprintf.c	/^	WIDTH,$/;"	e	enum:e_state	file:
begin	inc/c_string.h	/^	char	 *begin;$/;"	m	struct:s_string	typeref:typename:char *
capacity	inc/c_string.h	/^	size_t capacity;$/;"	m	struct:s_string	typeref:typename:size_t
e_state	src/ft_vdprintf.c	/^typedef enum e_state {$/;"	g	file:
end	inc/c_string.h	/^	char	 *end;$/;"	m	struct:s_string	typeref:typename:char *
ft_dprintf	src/ft_dprintf.c	/^int ft_dprintf(int fd, const char *format, ...) {$/;"	f	typeref:typename:int
ft_fprintf	src/ft_fprintf.c	/^int ft_fprintf(FILE *stream, const char *format, ...) {$/;"	f	typeref:typename:int
ft_printf	src/ft_printf.c	/^int ft_printf(const char *format, ...) {$/;"	f	typeref:typename:int
ft_vdprintf	src/ft_vdprintf.c	/^int ft_vdprintf(int fd, const char *format, va_list ap) {$/;"	f	typeref:typename:int
ft_vfprintf	src/ft_vfprintf.c	/^int ft_vfprintf(FILE *stream, const char *format, va_list ap) {$/;"	f	typeref:typename:int
ft_vprintf	src/ft_vprintf.c	/^int ft_vprintf(const char *format, va_list ap) {$/;"	f	typeref:typename:int
left_align	src/ft_vdprintf.c	/^	unsigned int left_align : 1;$/;"	m	struct:s_flags	typeref:typename:unsigned int:1	file:
put_blank	src/ft_vdprintf.c	/^	unsigned int put_blank : 1;$/;"	m	struct:s_flags	typeref:typename:unsigned int:1	file:
s_flags	src/ft_vdprintf.c	/^typedef struct s_flags {$/;"	s	file:
s_string	inc/c_string.h	/^typedef struct s_string {$/;"	s
special	src/ft_vdprintf.c	/^size_t special(string output, const char *format, va_list ap) {$/;"	f	typeref:typename:size_t
string	inc/c_string.h	/^typedef t_string *string;$/;"	t	typeref:typename:t_string *
string_data	src/c_string.c	/^char *string_data(const string str) {$/;"	f	typeref:typename:char *
string_delete	src/c_string.c	/^void string_delete(string str) {$/;"	f	typeref:typename:void
string_length	src/c_string.c	/^size_t string_length(string str) {$/;"	f	typeref:typename:size_t
string_new	src/c_string.c	/^string string_new(size_t initial_size) {$/;"	f	typeref:typename:string
string_push_back	src/c_string.c	/^void string_push_back(string str, char c) {$/;"	f	typeref:typename:void
string_reserve	src/c_string.c	/^void string_reserve(string str, size_t new_cap) {$/;"	f	typeref:typename:void
string_size	src/c_string.c	/^size_t string_size(string str) {$/;"	f	typeref:typename:size_t
t_flags	src/ft_vdprintf.c	/^} t_flags;$/;"	t	typeref:struct:s_flags	file:
t_state	src/ft_vdprintf.c	/^} t_state;$/;"	t	typeref:enum:e_state	file:
t_string	inc/c_string.h	/^} t_string;$/;"	t	typeref:struct:s_string
use_alternate_form	src/ft_vdprintf.c	/^	unsigned int use_alternate_form : 1;$/;"	m	struct:s_flags	typeref:typename:unsigned int:1	file:
use_sign	src/ft_vdprintf.c	/^	unsigned int use_sign : 1;$/;"	m	struct:s_flags	typeref:typename:unsigned int:1	file:
use_zero_padding	src/ft_vdprintf.c	/^	unsigned int use_zero_padding : 1;$/;"	m	struct:s_flags	typeref:typename:unsigned int:1	file:
